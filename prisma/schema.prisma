// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Role {
  id          String @id @default(uuid())
  roleName    String @unique
  description String?
  users       User[]
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  images    UserImage[]
  posts     Post[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserImage {
  id      String  @id @default(uuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  imageId String
  image   Image   @relation(fields: [imageId], references: [id])
  isUsed  Boolean @default(false)
}

model Image {
  id          String   @id @default(uuid())
  url         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userImages  UserImage[]
}

model Post {
  id          String     @id @default(uuid())
  title       String
  status      PostStatus @default(PUBLIC)
  postDetail  PostDetail @relation(fields: [postDetailId], references: [id])
  postDetailId String @unique
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum PostStatus {
  PUBLIC
  PRIVATE
}

model PostDetail {
  id      String  @id @default(uuid())
  content String
  post    Post?
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  title     String
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

