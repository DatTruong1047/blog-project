// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  firstname       String?
  lastname        String?
  email           String     @unique
  password        String
  dateOfBirth     DateTime?
  sex             SexOptions @default(MALE)
  address         String?
  isAdmin         Boolean?   @default(false)
  isVerifiedEmail Boolean    @default(false)
  mediaId         String?    @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  posts           Post[]
  comments        Comment[]
  media           Media?     @relation(fields: [mediaId], references: [id])
  refreshTokens   Token[]
}

model Token {
  id            Int      @id @default(autoincrement())
  refresh_token String   @unique
  expiresAt     DateTime
  ipAddress     String?
  user_id       String
  users         User     @relation(fields: [user_id], references: [id])
}

model Media {
  id          String      @id @default(uuid())
  url         String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?
  PostMedia   PostMedia[]
}

model PostMedia {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String      @id @default(uuid())
  title      String
  status     PostStatus  @default(PRIVATE)
  content    String
  authorId   String
  author     User        @relation(fields: [authorId], references: [id])
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  PostMedia  PostMedia[]
}

enum PostStatus {
  PUBLIC
  PRIVATE
  DRAFT
}

enum SexOptions {
  MALE
  FEMALE
  OTHER
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
